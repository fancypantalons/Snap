#
# Example Snap RC file.  This is straight-up Perl, so you can do
# pretty much anything in here, from adding new commands to redefining
# variables and functions, or anything else you want.  This example file
# demonstrates many of the things you can do with a Snap RC file, like
# module loading and startup functions.
#
# See the function at the end of this script for startup commands.
#

my $SNAP_HOME = "$ENV{HOME}/snap";

# Load interface script(s).

eval_file('Gtk.pl');
# eval_file('Tk.pl');
eval_file('Curses.pl');
eval_file('Plain.pl');

# Load additional startup scripts.

# eval_file('pig_latin.pl');

#
# Add a personal script directory to the scripts path.
# You can add additional script directories here.
#

push @SCRIPT_PATH, "$SNAP_HOME/scripts";

############################# User Settings ##############################
#
# The following is all of the user-level settings.  Please changed these
# to your desired settings.
#
# Speed index for linespeed variable:
#
# 0  - unknown
# 1  - 14.4
# 2  - 28.8
# 3  - 33.6
# 4  - 56.7
# 5  - 64K
# 6  - 128K
# 7  - Cable
# 8  - DSL
# 9  - T1
# 10 - T3+
#

$username = 'username';
$password = 'password';
$email = 'anon@napster.com';
$speed = 7;

$serverport = 6699;    # If you are behind a firewall, set this to 0.

# $socks = 1;          # Enable usage of SOCKS.
# $socks_server = "proxy.server.com:8080"
# $socks_user = "socks_username"
# $socks_pass = "socks_password"
# $socks_version = 5

$download = "$SNAP_HOME/download";
$upload = "$SNAP_HOME/upload";
$cachefile = "$SNAP_HOME/cache.dat";
$hotlist = "$SNAP_HOME/hotlist.txt";

$ul_speed = -1;        # Max speed for u/l's in b/s.            -1 => disabled.
$ul_limit = -1;        # Max number of u/l's allowed at a time. -1 == no limit

# $colours = 0;        # Enable black and white mode (Curses only)
# $daemon = 1;         # Enable daemon mode


######################## Module Specific Settings ######################

#
# Remote Controller Settings
#

@allowed = ();                             # List of allowed users
@disabled = ("/eval", "/exec", "/alias");  # List of disabled commands
$remote_password = "remote_pass";          # Access password

#
# Sock settings
#

$sock_addr = '127.0.0.1';                  # Interface to accept connections on
$sock_port = 2323;                         # Port to listen on
$sock_password = 'sock_pass';              # Password required to connect

######################### User Module Section #########################

push @{ $code_hash{&MSG_INIT} }, \&startup_code;

#
# You can add code here to be executed after program initialization.
# This may include module loading or anything else you like.
#

sub startup_code
{
  # You can evaluate Perl scripts on startup by using eval_file().
  # eval_file(), like "/eval", obeys the SCRIPT_PATH variable.

  # eval_file("remote.pl");
  # eval_file("sock.pl");
}
